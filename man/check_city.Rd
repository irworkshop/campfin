% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_city.R
\name{check_city}
\alias{check_city}
\title{Check whether an input is a valid place with Google Maps API}
\usage{
check_city(city = NULL, state = NULL, zip = NULL, key = NULL,
  guess = FALSE)
}
\arguments{
\item{city}{A string of city name to be submitted to the Google Maps Geocode API and tested.}

\item{state}{Optional. The state associated with the city that you wish to check against the Maps API.}

\item{zip}{Optional. Supply a string of zipcode will help with matching precision}

\item{key}{a character string to be passed into key=''}

\item{guess}{a logical vector. If true, the function returns a dataframe with three columns. In addition to the first
logical vector, it would return a \code{locality} column with the API-matched localities, i.e. unincorporated cities or census designated places returned by API,
and a third column first part of matched formatted address returned by the API.
When \code{place} is set to TRUE, the results returned can be any address, including highways, street addresses, cities, townships, states, provinces, countires, etc.}
}
\value{
By default, returns a logical vector: If the city returned by the API comes
back the same as the city input, the function will evaluate to true;
otherwise it will evaluate to false.The evaluation ignores case.
If the the guess argument is set to T, returns a dataframe with a logical vector in the first column and the normalized address in the second.
}
\description{
Check whether a place is a valid place or misspelling by matching against
the Google Geocoding seaerch result. Use the \code{\link[httr:GET]{httr::GET()}} to
send a request to the Google Maps API for geocoding information. The query will concatenate
all the geographical information that is passed in into a long string.
Then the function pulls the \code{formatted_address} endpoint of the API results
and then identifies and extracts the long name field from the API \emph{locality} result and compare
it against the input to see if the input and output match up.
Note that you will need to pass in your Google Maps Place API key with the arguement \code{key=}.
}
\examples{
\dontrun{ requires Google API key
check_city("WYOMISSING", "PA", key = your_key) #replace your_key with your API key
check_city("Waggaman", "LA", "70094", key = your_key)
}
}
\seealso{
\url{http://code.google.com/apis/maps/documentation/geocoding/}

Other geographic normalization functions: \code{\link{abbrev_full}},
  \code{\link{abbrev_state}}, \code{\link{expand_abbrev}},
  \code{\link{expand_state}}, \code{\link{fetch_city}},
  \code{\link{normal_address}}, \code{\link{normal_city}},
  \code{\link{normal_state}}, \code{\link{normal_zip}}
}
\concept{geographic normalization functions}
