% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_city.R
\name{fetch_city}
\alias{fetch_city}
\title{Return Closest Match Result of Cities from Google Maps API}
\usage{
fetch_city(address = NULL, key = NULL)
}
\arguments{
\item{address}{A vector of street addresses. Sent to the API all in one string.}

\item{key}{a character string to be passed into key=''. This is your API key obtained from Google.}
}
\value{
A character vector: results of the formatted address endpoint from Google. This will include all the fields
from street address, city, state/province, zipcode/postal code to country/regions.
}
\description{
Get the matching against
the Google Geocode seaerch result. Use the \code{\link[httr:GET]{httr::GET()}} to
send a request to the Google Maps API for geocoding information. The query will concatenate
all the geographical information that is passed in into a long string.
Then the function pulls the \code{formatted_address} endpoint of the API results
and then identifies and extracts the the first field of the result. Note that you will
need to pass in your Google Maps Place API key with the arguement \code{key=}.
}
\examples{
\dontrun{ requires Google API key
fetch_city("4400 Mass Ave. DC", key = api_key) # Use your API key from Google Maps
}
}
\seealso{
\url{http://code.google.com/apis/maps/documentation/geocoding/}

Other geographic normalization functions: \code{\link{abbrev_full}},
  \code{\link{abbrev_state}}, \code{\link{check_city}},
  \code{\link{expand_abbrev}}, \code{\link{expand_state}},
  \code{\link{normal_address}}, \code{\link{normal_city}},
  \code{\link{normal_state}}, \code{\link{normal_zip}}
}
\concept{geographic normalization functions}
